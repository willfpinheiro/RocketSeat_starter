iniciar yarn em um projeto 
yarn init

adicionar babel a um projeto front
yarn add @babel/cli
yarn add @babel/preset-env
yarn add @babel/core


"scripts": {
    "dev": "babel ./main.js -o ./bundle.js -w"
  }
- Gera um script que conver todo codigo feito em main.js para bundle.js onde é intendivel pelo navegador.
- D -w serve para ficar monitorando as modificações e nao precisar ficar chamando o script novamente 

const vs var vs let
const não pode ter seu valor reatribuido, dado um valor, não pode mudar esse valor
const = a nunca podera ser const = b
mas caso queira colcoar const a = {nome: 'diago' }, se atribuir a.nome = 'will', dará certo

let so funciona dentro do scopo, se tentar usar a variavel fora, não será possivel


Iniciando webpack - 
--- Serve para fazer um roda de coleta entre arquivos js e jogalos todos para o arquivo main que esta sendo executado
necessario instalar
yarn add webpack webpack-cli -D
yard add babel babel-loader -D
-d pois foi modificado o package.jason para desenvolvimento

 "scripts": {
    "dev": "webpack --mode=development -w"
  }
  modificado o dev para rodar agora atravez do webpak adicionado recentemente 

  // export defult, é quando um arquivo js conterm somente uma função. dessa forma, na importação nao é preciso colocar as {}


webpack dev server serve para poder usar o serviço em localhost
  "scripts": {
    "dev": "webpack-dev-server --mode=development"  - dito na aula
    "dev": "webpack serve --mode development --env development" - - encontrado como solução na internet
  }



  //async/wait
   yarn add @babel/plugin-transform-async-to-generator
yarn add @babel/polyfill
instalar extenções e colocar no babel:
@babel/plugin-transform-async-to-generator
e colocar no webpack:
@babel/polyfill

obs: so posso usar wait em uma função que foi previamente descrita como async


// axios
yarn add axios
